pipeline 
{
  parameters 
  {
    choice(name: 'Unity_Version', choices: ['2020.3.0f1', '2019.4.22f1'], description: 'Unity 2019 is recommended for full MRTK support.')
    booleanParam(name: 'Run_EditMode_Tests', defaultValue: true, description: 'Tests the game state prior to entering PlayMode.')
    booleanParam(name: 'Run_PlayMode_Tests', defaultValue: true, description: 'Tests aspects of the game that require runtime.')
    booleanParam(name: 'Notify', defaultValue: true, description: 'Notify Discord channel of build status, and create Jira tickets for bugs.')
    booleanParam(name: 'Build', defaultValue: false, description: 'Full build, takes a long time.')
    booleanParam(name: 'Clean', defaultValue: false, description: 'Deletes and re-clones the repository before running this build.')
  }

  agent
  {
    node 
    {
      label 'Windows'
      customWorkspace 'C:/Jenkins/workspace/'
    }
  }

  options 
  {
    timestamps()
    timeout(time: 30, unit: 'MINUTES')
  }

  environment
  {
    // Paths are relative to custom workspace 
    PROJECT_PATH = '.\\src'
    UNITY_PATH_2020 = '\"C:\\Program Files\\Unity\\Hub\\Editor\\2020.3.0f1\\Editor\\Unity.exe\"'
    UNITY_PATH_2019 = '\"C:\\Program Files\\Unity\\Hub\\Editor\\2019.4.22f1\\Editor\\Unity.exe\"'

    DISCORD_WEBHOOK = "https://discordapp.com/api/webhooks/814714586397802507/7Ii7m9_KzuO0P2T8EV8qem-UBy64sUu_Mpx9QfWzHTelq7YThfI3sClnAVwYQcAD4WTs"
  }

  stages
  {
    stage('Clean')
    {
      when
      {
        expression { return params.Clean }
      }
      steps
      {
        deleteDir()
      }
    }

    stage('Checkout')
    {
      steps
      {
        echo "Checking out code from GitHub..."
        git branch: 'main',
        credentialsId: 'GitHub',
        url: 'https://github.com/git-yulia/HoloTest.git/'

        script
        {
          currentBuild.description = "Add a description."
        }
      }
    }

    stage('Build')
    {
      when
      {
        expression { return params.Build }
      }
      steps
      {      
        script
        {
          String unity_path = ""

          if (params.Unity_Version == '2019.4.22f')
          {
            unity_path = UNITY_PATH_2019
          }
          else
          {
            unity_path = UNITY_PATH_2020
          }

          String unity_cmd = "$unity_path -batchmode -nographics -quit -projectPath ${PROJECT_PATH}"
          String logs_path = "${WORKSPACE}/automation/logs"

          echo "Building Unity project..."

          bat "${UNITY_PATH_2020} -batchmode -nographics -quit -projectPath ${PROJECT_PATH} -buildTarget WindowsStoreApps -executeMethod JenkinsBuild.BuildOnWindows"
          
        }
      }
    }

    stage('Test')
    {
      steps 
      {
        script 
        {
          String unity_path = ""

          if (params.Unity_Version == '2019.4.22f')
          {
            unity_path = UNITY_PATH_2019
          }
          else
          {
            unity_path = UNITY_PATH_2020
          }

          // -nographics
          String unity_cmd = "$unity_path -batchmode -projectPath ${PROJECT_PATH} -runTests"
          String logs_path = "${WORKSPACE}/automation/logs"

          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
          {
            if (params.Run_EditMode_Tests)
            {
              echo "Running edit mode tests..."
              bat "$unity_cmd -testResults ${logs_path}/editmodetests.xml -testPlatform editmode -logFile ${logs_path}/edittestlog.txt"
            }
            if (params.Run_PlayMode_Tests)
            {
              echo "Running play mode tests..."
              bat "$unity_cmd -testResults ${logs_path}/playmodetests.xml -testPlatform playmode -logFile ${logs_path}/playtestlog.txt -outFolder ${logs_path}/playmodetests_out/"
            }
          }
        }
      }
    }

    stage('Notify')
    {
      when 
      {
        expression { return params.Notify }
      }
      steps
      {
        echo "Notify steps go here..."

        // discordSend webhookURL: "${DISCORD_WEBHOOK}", description: 'Pipeline Build', footer: "Footer Text", title: env.JOB_NAME, result: currentBuild.currentResult
        // link: env.BUILD_URL

        // Publish NUnit (UTF) test results
        // nunit testResultsPattern: "${WORKSPACE}/automation/logs/editmodetests.xml"
      }
    }
  }

  post 
  {
    always 
    {
        echo 'This will always run'
    }
    success 
    {
        echo 'This will run only if successful'
    }
    failure 
    {
        echo 'This will run only if failed'
    }
    unstable 
    {
        echo 'This will run only if the run was marked as unstable'
    }
    changed 
    {
        echo 'This will run only if the state of the Pipeline has changed'
        echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}